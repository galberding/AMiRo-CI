# Analize Structure of AMiRo-OS configurations

* AOS settings
** aos_bootloader.h
** aos_alldconf.h
** aos_chconf.h

* Module Configuration Files
** alldconf.h
*** settings for amiro-lld
*** includes aos_lldconf.h
*** Contains:
#+begin_src c
  /* lightring 1-2 */
  #define TLC5947_LLD_CHAINED                     3
  // or
  /* powermanagement 1-1 */
  #define BQ27500_LLD_HWVERSION                   120
  #define PKxxxExxx_LLD_FREQUENCY_MIN             2000
  #define PKxxxExxx_LLD_FREQUENCY_SPEC            4000
  #define PKxxxExxx_LLD_FREQUENCY_MAX             6000
#+end_src
** aosconf.h
*** application specific settings
**** General options
#+begin_src c
  /* AMiRo-OS/modules/DiWheelDrive_1-2/aosconf.h */
  #define _AMIRO_OS_CFG_
  #define AMIRO_OS_CFG_VERSION_MAJOR              2
  #define AMIRO_OS_CFG_VERSION_MINOR              1
  #if defined(AMIRO_APPS) && (AMIRO_APPS == true)
    #include <osconf.h>
  #endif /* defined(AMIRO_APPS) && (AMIRO_APPS == true) */
#+end_src
**** Kernel parameters
     #+begin_src c
       #if !defined(OS_CFG_DBG)
	 #define AMIROOS_CFG_DBG                       true
       #else /* !defined(OS_CFG_DBG) */
	 #define AMIROOS_CFG_DBG                       OS_CFG_DBG
       #endif /* !defined(OS_CFG_DBG) */

     #+end_src
**** Bootloadder
     #+begin_src c
       #if !defined(OS_CFG_BOOTLOADER)
	 #define AMIROOS_CFG_BOOTLOADER                AOS_BOOTLOADER_NONE
       #else /* !defined(OS_CFG_BOOTLOADER) */
	 #define AMIROOS_CFG_BOOTLOADER                OS_CFG_BOOTLOADER
       #endif /* !defined(OS_CFG_BOOTLOADER) */
     #+end_src
**** CAN configuration
     #+begin_src c
       #if !defined(OS_CFG_FBCAN1_ENABLE)
	 #define AMIROOS_CFG_FBCAN1_ENABLE             false
       #else /* !defined(OS_CFG_FBCAN1_ENABLE) */
	 #define AMIROOS_CFG_FBCAN1_ENABLE             OS_CFG_FBCAN1_ENABLE
       #endif /* !defined(OS_CFG_FBCAN1_ENABLE) */
     #+end_src
**** Startup Shutdown Synchronization Protocol (SSSP)
     #+begin_src c
       #if !defined(OS_CFG_SSSP_ENABLE)
	 #define AMIROOS_CFG_SSSP_ENABLE               false
       #else /* !defined(OS_CFG_SSSP_ENABLE) */
	 #define AMIROOS_CFG_SSSP_ENABLE               OS_CFG_SSSP_ENABLE
       #endif /* !defined(OS_CFG_SSSP_ENABLE) */
     #+end_src
**** System shell options
     #+begin_src c
       #if !defined(OS_CFG_SHELL_ENABLE)
	 #define AMIROOS_CFG_SHELL_ENABLE              true
       #else /* !defined(OS_CFG_SHELL_ENABLE) */
	 #define AMIROOS_CFG_SHELL_ENABLE              OS_CFG_SHELL_ENABLE
       #endif /* !defined(OS_CFG_SHELL_ENABLE) */
     #+end_src
** chconf.h
*** Chibi os and kernel configuration
*** Includes aosconf.h
*** Overrides settings in aos_chconf.h
*** Possible Contents:
    #+begin_src c
      #if !defined(CH_CFG_ST_RESOLUTION)
      #define CH_CFG_ST_RESOLUTION                    16
      #endif
      /* ... */
      #define CORTEX_ENABLE_WFI_IDLE                  TRUE
    #+end_src
** halconf.h
*** Device driver default settings
*** Enables subsystems in Chibios
    #+begin_src c
      #if !defined(HAL_USE_PAL) || defined(__DOXYGEN__)
      #define HAL_USE_PAL                         TRUE
      #endif
    #+end_src
*** PAL driver related settings
    #+begin_src c
      #if !defined(HAL_USE_WSPI) || defined(__DOXYGEN__)
      #define HAL_USE_WSPI                        FALSE
      #endif
    #+end_src
*** ADC driver related settings
    #+begin_src c
      #if !defined(ADC_USE_WAIT) || defined(__DOXYGEN__)
      #define ADC_USE_WAIT                        TRUE
      #endif
    #+end_src
*** CAN settings
    #+begin_src c
      #if !defined(CAN_ENFORCE_USE_CALLBACKS) || defined(__DOXYGEN__)
      #define CAN_ENFORCE_USE_CALLBACKS           FALSE
      #endif
    #+end_src
*** CRY driver
    #+begin_src c
      #if !defined(HAL_CRY_USE_FALLBACK) || defined(__DOXYGEN__)
      #define HAL_CRY_USE_FALLBACK                FALSE
      #endif
    #+end_src
***  DAC driver
    #+begin_src c
      #if !defined(DAC_USE_WAIT) || defined(__DOXYGEN__)
      #define DAC_USE_WAIT                        TRUE
      #endif
    #+end_src
*** I2C
    #+begin_src c
      #if !defined(I2C_USE_MUTUAL_EXCLUSION) || defined(__DOXYGEN__)
      #define I2C_USE_MUTUAL_EXCLUSION            TRUE
      #endif
    #+end_src
*** ...
** mcuconf.h
*** General definition of the micro controller
*** Content:
    #+begin_src c
      #define STM32_DAC_DAC1_CH2_DMA_PRIORITY     2
      #define STM32_DAC_DAC1_CH1_DMA_STREAM       STM32_DMA_STREAM_ID(1, 5)
      #define STM32_DAC_DAC1_CH2_DMA_STREAM       STM32_DMA_STREAM_ID(1, 6)
    #+end_src
**
