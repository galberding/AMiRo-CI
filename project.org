* General Todolist for all upcomming and optional tasks

* Configuration Builder
  Extract macros and create configurations for each module.
** TODO Specify what configurations exist and how to detect them
*** General OS specific settings(bootloader, alldconf, chconf)
*** Module settings (alldconf, aosconf, chconf, halconf, mcuconf, )
** Extract configuration parameters
*** DONE Extract simple defines with regex
***
 TODO Capture !definded() -- default configurations
    #+begin_src python
      r"""
      \#if\s(?P<ifdirective>!defined\((?P<flag>[A-Z,\d,_]+)\))\n
      \s*\#define\s*(?P<SubFlag1>[A-Z,\d,_]*)\s*(?P<Value1>.*)\n
      \#else.*\n\s*#define\s*(?P=SubFlag1)\s*(?P<value2>.*)\n
      \#endif.*
      """

    #+end_src

* Configuration Tester
  Use different configurations to build the OS and capture the result
** Use config to alter the OS or Apps in a sufficient manner
** Capture Results for visualization
** Compare results to expectations

* CLI
  It is required to trigger the procedure where the application can be triggered by the setup.sh
  Therefore a simple cli is required to configure and manage the application
** Identify important components that needs to be exposed to the user
*** Generation of problematic configurations
*** Setting expectations
*** General "Database/CSV" editing
*** Prettify results in human readable format
** Overwork the setup.sh in order to automate the interactive mode by invoking:
   #+begin_src bash
     ./setup.sh --init-accept-licence | -i
   #+end_src
