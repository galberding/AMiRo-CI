Modules: [
            'DiWheelDrive_1-1',
            # "DiWheelDrive_1-2",
            # "LightRing_1-0",
            # "LightRing_1-2",
            "NUCLEO-F103RB",
            # "NUCLEO-F401RE",
            # "NUCLEO-F767ZI",
            # "NUCLEO-G071RB",
            # "NUCLEO-L476RG",
            # "PowerManagement_1-1",
            # "PowerManagement_1-2",
            # "STM32F407G-DISC1",
        ]

# Apps: []

ExcludeOptions: [UrtConf]

MakeOptions:
  USE_OPT: ['-O2', '-fstack-usage', '-fdiagnostics-format=json', '-Wl,--print-memory-usage']

Options:
  UrtConf:

    # @brief   Allow redefinition during configuration tests.
    APP_CFG_TEST: [true, false]

    # Width of the urt_delay_t data type.
    # Possible values are 32 and 64 bits.
    # By definition time is represented in microseconds.
    URT_CFG_DELAY_WIDTH: [0, 32, 64]

    # @brief   Width of the urt_nodestage_t data type.
    # @details Possible values are 8, 16, 32, and 64 bits.
    URT_CFG_NODESTAGE_WIDTH: [0, 8, 16, 32, 64]

    # @brief   Synchronization groups API enable flag.
    URT_CFG_SYNCGROUPS_ENABLED: [true, false]

    UrtDebug:
      # @brief   Debug enable flag.
      URT_CFG_DEBUG_ENABLED: [true]

    UrtOsal:
      # @brief   Flag to enable timeout functionality for condition variables.
      # @details If the OS supports this feature, urtPublisherPublish()
      # can be called
      # with a timeout. Otherwise it will block indefinitely under certain
      # conditions.
      URT_CFG_OSAL_CONDVAR_TIMEOUT: [false]

    PubSub:
      # @brief   Enable flag for the publish-subscribe system.
      URT_CFG_PUBSUB_ENABLED: [true]

      # @brief   Width of the urt_topicid_t data type.
      # @details Possible values are 8, 16, 32, and 64 bits.
      URT_CFG_PUBSUB_TOPICID_WIDTH: [16]

      # @brief   Flag to enable profiling of the publish-subscribe system.
      URT_CFG_PUBSUB_PROFILING: [true]

      # @brief   Flag to enable deadline QoS for the publish-subscribe system.
      URT_CFG_PUBSUB_QOS_DEADLINECHECKS: [true]

      # @brief   Flag to enable rate QoS for the publish-subscribe system.
      URT_CFG_PUBSUB_QOS_RATECHECKS: [true]

      # @brief   Flag to enable jitter QoS for the publish-subscribe system
      URT_CFG_PUBSUB_QOS_JITTERCHECKS: [true]

    RemoteProcedureCalls:
      # @brief   Enable flag for remote procedure calls.
      URT_CFG_RPC_ENABLED: [true]

      # @brief   Width of the urt_serviceid_t data type.c
      # @details Possible values are 8, 16, 32, and 64 bits.
      URT_CFG_RPC_SERVICEID_WIDTH: [16]

      # @brief   Flag to enable profiling of remote procedure calls.
      URT_CFG_RPC_PROFILING: [true]

      # @brief   Flag to enable deadline QoS for remote procedure calls.
      URT_CFG_RPC_QOS_DEADLINECHECKS: [true]

      # @brief   Flag to enable jitter QoS for remote procedure calls.
      URT_CFG_RPC_QOS_JITTERCHECKS: [true]

    Profiling:
      # @brief   Width of all profiling counters.
      # @details Possible values are 8, 16, 32, and 64 bits.
      URT_CFG_PROFILING_COUNTER_WIDTH: [64]



  AosConfig:
    # Flag to enable/disable debug API and logic.
    OS_CFG_DBG: [true, false]

    # Flag to enable/disable unit tests.
    # Setting this flag will implicitely enable the shell.
    OS_CFG_TESTS_ENABLE: [true, false]

    # Flag to enable/disable profiling API and logic.
    OS_CFG_PROFILE: [false]

    # Mask for the control thread to listen to certain GPIO events.
    # Any mandatory events (e.g. for SSSP) are enabled implicitely despite
    # this configuration.
    # OS_CFG_MAIN_LOOP_GPIOEVENT_FLAGSMASK: [MODULE_OS_GPIOEVENTFLAG_USERBUTTON]

    # Timeout value when waiting for events in the main loop in
    # microseconds.
    # A value of 0 deactivates the timeout.
    OS_CFG_MAIN_LOOP_TIMEOUT: [0, 100]

    # Filtered & Buffered CAN (FBCAN) configuration
    FilteredBufferedCan:
      # Flag to enable FBCAN for the CANX interface.
      OS_CFG_FBCAN1_ENABLE: [true, false]
      OS_CFG_FBCAN2_ENABLE: [true, false]
      OS_CFG_FBCAN3_ENABLE: [true, false]

      # Size of input buffers for the SerialCANDriver.
      # Setting this value to 0 diables Serial over CAN API.
      # It is implicitly set by OS_CFG_SHELL_LINEWIDTH
      # OS_CFG_FBCAN_SERIAL_BUFFERSIZE: [64]

    #(Startup Shutdown Synchronization Protocol) configuration
    SSSP:

      # Flag to enable SSSP.
      # If disables all other flags are disabled too
      OS_CFG_SSSP_ENABLE: [true, false]

      # Flag to indicate, whether the SSSP startup sequence shall be
      # executed by AMiRo-OS.
      # This setting must be 'false' in case another software (e.g. a
      # bootloader) handles the initial stages of the SSSP startup phase.
      OS_CFG_SSSP_STARTUP: [true, false]

      # Flag to indicate, whether the SSSP shutdown sequence shall be
      # executed by AMiRo-OS.
      # This setting should be false in case another software (e.g. a
      # bootloader) handles the final stages of the SSSP shutdown phase.
      OS_CFG_SSSP_SHUTDOWN: [true, false]

      # Flag to indicate, whether the module stack initialization (MSI;
      # stage 3 of the SSSP startup phase) shall be executed.
      # In order to execute MSI, a broadcast bus (BCB) and according
      # interfaces must be defined.
      OS_CFG_SSSP_MSI: [true, false]

      # Width of the @p aos_sssp_moduleid_t type.
      # Possible settings are 8, 16, 32 and 64.
      OS_CFG_SSSP_MODULEIDWIDTH: [true, false]

      # Flag to set the module as SSSP master.
      # There must be only one module with this flag set to true in a
      # system.
      OS_CFG_SSSP_MASTER: [true, false]

      # Flag to set the module to be the first in the stack.
      # There must be only one module with this flag set to true in a
      # system.
      OS_CFG_SSSP_STACK_START: [true, false]

      # Flag to set the module to be the last in the stack.
      # There must be only one module with this flag set to true in a
      # system.
      OS_CFG_SSSP_STACK_END: [true, false]

      # Delay time (in microseconds) how long a SSSP signal must be active.
      OS_CFG_SSSP_SIGNALDELAY: [1000]

      # Time boundary for robot wide clock synchronization in microseconds.
      # Whenever the SSSP S (snychronization) signal gets logically
      # deactivated, all modules need to align their local uptime to the
      # nearest multiple of this value.
      # Setting this value to 0 deactivates clock synchronization.
      OS_CFG_SSSP_SYSSYNCPERIOD: [1000000]

    # System shell options
    Shell:
      # Shell enable flag.
      OS_CFG_SHELL_ENABLE: [true, false]
      # Shell thread stack size.
      OS_CFG_SHELL_STACKSIZE: [0, 1024]

      # Shell thread priority.
      # Thread priorities are specified as an integer value.
      #        lowest  ┌ THD_LOWPRIO_MIN
      #                │ ...
      #                └ THD_LOWPRIO_MAX
      #                ┌ THD_NORMALPRIO_MIN
      #                │ ...
      #                └ THD_NORMALPRIO_MAX
      #                ┌ THD_HIGHPRIO_MIN
      #                │ ...
      #                └ THD_HIGHPRIO_MAX
      #                ┌ THD_RTPRIO_MIN
      #                │ ...
      #        highest └ THD_RTPRIO_MAX
      # OS_CFG_SHELL_THREADPRIO: [AOS_THD_NORMALPRIO_MIN]

      # Shell maximum input line length.
      OS_CFG_SHELL_LINEWIDTH: [0, 64]

      # Shell maximum number of arguments.
      OS_CFG_SHELL_MAXARGS: [0, 8]

      # Shell number of history entries.
      # A value of 0 disables shell history.
      OS_CFG_SHELL_HISTLENGTH: [0, 3]

      # Shell remote access enable flag.
      # If enabled, AMiRo-OS shells support remote access.
      OS_CFG_SHELL_REMOTE_ENABLE: [true, false]
